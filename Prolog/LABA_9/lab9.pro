PREDICATES
	nondeterm generate(integer,integer,string)
	nondeterm get_answer(string,integer,string,integer,string,integer)
	nondeterm test(string,integer,string,integer,string,integer)
	
CLAUSES

%Для правила generate - генерация возможных решений
%Первый аргумент - просто счётчик
%Второй аргумент - количество выпитых чашек
%Третий аргумент - отчество человека, походящее по условиям 
generate(J,J,"Уваровна"). % В остальных случаях Уваровна
generate(J,J,"Титовна"):- %Количество чашек,выпитых Титовной,кратно трём
	J mod 3=0. 
generate(11,11,"Карповна"). %Карповна выпила 11 чашек
generate(I,J,B):-  %Исходя из условий задачи маловерятно, что кто-то из купчих выпил больше 20 чашек
	I<20, U=I+1, generate(U,J,B).



test(B,A,D,C,F,E):-
	%Проверка на то, что у всех трёх купчих будут разные отчества
	B<>D,
	F<>B,
	F<>D,
	%Условия "Если бы", накладываемые на перечень возможных решений
	A+5=C+E, % Если бы Олимпиада выпила на 5 чашек больше, то она выпила бы столько, сколько две другие вместе.
	C+9=A+E. % Если бы Сосипатра выпила бы на 9 чашек больше, то она выпила бы столько, сколько две другие вместе.	


get_answer(B,A,D,C,F,E):-
	%Генерируем возможные количества, выпитых чашек и Отчества для каждой купчихи
	generate(1,A,B),
	generate(1,C,D), 
	generate(1,E,F), 
	%Проверка допустимости решений
 	test(B,A,D,C,F,E),
	
	writef("Олимпиада % = % \nСосипатра % = % \nПоликсена % = % \n",B,A,D,C,F,E),
	fail.
GOAL 

	get_answer(Middle_name1,Cup1,Middle_name2,Cup2,Middle_name3,Cup3).
